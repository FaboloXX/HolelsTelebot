from loader import bot
from keyboards.reply.photo import request_photo
from keyboards.reply.language import request_language
from keyboards.inline.location import location_buttons
from states.dialog_information import InfoState
from telebot.types import Message, CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto
from parsers.parser import request_locations, request_hotels, request_hotel_photo
from parsers.api_info import url_locations, url_hotels, url_hotel_photo, headers
from telegram_bot_calendar import DetailedTelegramCalendar
from datetime import date, datetime, timedelta
from database.base import add_data, get_data
from telebot.apihelper import ApiTelegramException


@bot.message_handler(commands=['cancel'])
def bot_start(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É cansel, –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.delete_state(message.from_user.id, message.chat.id)
    bot.reply_to(message, "–í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def start(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É lowprice –∏ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —è–∑—ã–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.set_state(message.from_user.id, InfoState.language, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['command'] = message.text[1:]
        data['date_time'] = datetime.today().replace(microsecond=0)
    bot.send_message(message.from_user.id,
                     f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞",
                     reply_markup=request_language()
                     )


@bot.message_handler(commands=['history'])
def get_history(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É history –∏ –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = get_data(message.from_user.id)
    if data:
        date_time = data[0][1]
        hotels = []
        for i in range(len(data)):
            if data[i][1] == date_time:
                # num = len(hotels) + 1
                hotels.append('üî∏ ' + data[i][3])
            elif data[i][1] != date_time or i == len(data) - 1:
                date_time = data[i][1]
                n = '\n'
                text = f"üìÖ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data[i][1]}\n" \
                       f"‚å®–ö–æ–º–∞–Ω–¥–∞: {data[i][0]}\n" \
                       f"üìç–õ–æ–∫–∞—Ü–∏—è: {data[i][2]}\n" \
                       f"üõé–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏:\n{n.join(hotels)}\n"
                bot.send_message(message.from_user.id, text)
                hotels = []
    else:
        bot.send_message(message.from_user.id, '–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏–ª–∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º '
                                               '–ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å')


@bot.message_handler(state=InfoState.language)
def get_language(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text in ('—Ä—É—Å—Å–∫–∏–π', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'):
        bot.set_state(message.from_user.id, InfoState.city, message.chat.id)
        bot.send_message(message.from_user.id,
                         '–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=ReplyKeyboardRemove())
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if message.text == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
                data['language'] = 'en_EN'
            elif message.text == '—Ä—É—Å—Å–∫–∏–π':
                data['language'] = 'ru_RU'
    else:
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É')


@bot.message_handler(state=InfoState.city)
def get_city(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –¥–∞–Ω–Ω—ã—Ö,
     –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–∏—Å–∞, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    querystring = dict()
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        querystring['query'] = message.text
        querystring['locale'] = data['language']
    locations = request_locations(url_locations, headers, querystring)
    if locations and len(locations) > 0:
        if len(locations) > 0:
            bot.send_message(message.from_user.id,
                             '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª. –£—Ç–æ—á–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
                             reply_markup=location_buttons(locations)
                             )
        else:
            bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑.')
    else:
        bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')



@bot.callback_query_handler(func=lambda call: call.data.startswith('city_id:'))
def callback_inline(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.
    :param call: –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º callback_data.
    """
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        data['id_location'] = call.data.split(':')[1]
    bot.answer_callback_query(call.id)
    bot.set_state(call.from_user.id, InfoState.arrival_date, call.message.chat.id)
    calendar = DetailedTelegramCalendar(calendar_id=1, locale='ru', min_date=date.today()).build()
    bot.send_message(call.message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞',
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def call_func(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞.
    :param call: –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º callback_data.
    """
    result, key, step = DetailedTelegramCalendar(calendar_id=1,
                                                 locale='ru',
                                                 min_date=date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞',
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        bot.edit_message_text(f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ {result}",
                              call.message.chat.id,
                              call.message.message_id)
        bot.set_state(call.from_user.id, InfoState.departure_date, call.message.chat.id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['arrival_date'] = result
            calendar = DetailedTelegramCalendar(calendar_id=2,
                                                locale='ru',
                                                min_date=data['arrival_date'] + timedelta(days=1)
                                                ).build()
        bot.send_message(call.message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞',
                         reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def call_func(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
    –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å.
    :param call: –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º callback_data.
    """
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        result, key, step = DetailedTelegramCalendar(calendar_id=2,
                                                     locale='ru',
                                                     min_date=data['arrival_date'] + timedelta(days=1)
                                                     ).process(call.data)
    if not result and key:
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞',
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        bot.set_state(call.from_user.id, InfoState.hotel_count, call.message.chat.id)
        bot.edit_message_text(f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {result}",
                              call.message.chat.id,
                              call.message.message_id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['departure_date'] = result
            delta = data['departure_date'] - data['arrival_date']
            data['days'] = delta.days
            if data['command'] == 'lowprice' or data['command'] == 'highprice':
                bot.set_state(call.from_user.id, InfoState.hotel_count, call.message.chat.id)
                bot.send_message(call.message.chat.id, '–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏(–Ω–µ –±–æ–ª–µ–µ 10)?')
            elif data['command'] == 'bestdeal':
                bot.set_state(call.from_user.id, InfoState.min_price, call.message.chat.id)
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å')


@bot.message_handler(state=InfoState.min_price)
def get_hotel_count(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text.isdigit():
        bot.send_message(message.from_user.id,
                         '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å')
        bot.set_state(message.from_user.id, InfoState.max_price, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['min_price'] = message.text
    else:
        bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã')


@bot.message_handler(state=InfoState.max_price)
def get_hotel_count(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
    –ª–∏–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['max_price'] = message.text
            if data['command'] == 'bestdeal':
                bot.set_state(message.from_user.id, InfoState.distance, message.chat.id)
                bot.send_message(message.from_user.id,
                                 '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª.\n–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º –í–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?')
            else:
                bot.set_state(message.from_user.id, InfoState.hotel_count, message.chat.id)
                bot.send_message(message.from_user.id,
                                 '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª.\n–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏(–Ω–µ –±–æ–ª–µ–µ 10)?')
    else:
        bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã')


@bot.message_handler(state=InfoState.distance)
def get_hotel_count(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text.isdigit():
        bot.set_state(message.from_user.id, InfoState.hotel_count, message.chat.id)
        bot.send_message(message.from_user.id,
                         '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª.\n–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏(–Ω–µ –±–æ–ª–µ–µ 10)?')
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['distance'] = message.text
    else:
        bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã')


@bot.message_handler(state=InfoState.hotel_count)
def get_hotel_count(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text.isdigit():
        if 10 >= int(message.text) >= 1:
            bot.send_message(message.from_user.id,
                             '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª. –ù—É–∂–Ω—ã –ª–∏ –í–∞–º —Ñ–æ—Ç–æ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
                             reply_markup=request_photo())
            bot.set_state(message.from_user.id, InfoState.photo, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['hotel_count'] = message.text
        else:
            bot.send_message(message.from_user.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 1 –∏ –±–æ–ª—å—à–µ —á–µ–º 10')
    else:
        bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã')


@bot.message_handler(state=InfoState.photo)
def get_photo(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text == '–î–∞':
        bot.send_message(message.from_user.id,
                         '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 5',
                         reply_markup=ReplyKeyboardRemove()
                         )
        bot.set_state(message.from_user.id, InfoState.photo_count, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['hotel_photo'] = message.text
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª')
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['hotel_photo'] = None
            data['photo_count'] = None
        get_result(message)
    else:
        bot.send_message(message.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')


@bot.message_handler(state=InfoState.photo_count)
def get_photo_count(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –ª–æ–≤–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text.isdigit():
        if 0 < int(message.text) <= 5:
            bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª')
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['photo_count'] = int(message.text)
            get_result(message)
        else:
            bot.send_message(message.from_user.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 10')
    else:
        bot.send_message(message.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')


def get_result(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.send_message(message.from_user.id, '–ú–∏–Ω—É—Ç–æ—á–∫—É, –ø–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...')
    text_not_found = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n' \
                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞'
    text_server_problem = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n' \
                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if data['command'] == 'lowprice':
            querystring_hotel = {"destinationId": data['id_location'],
                                 "pageNumber": '1',
                                 "pageSize": data['hotel_count'],
                                 "checkIn": data['arrival_date'],
                                 "checkOut": data['departure_date'],
                                 "adults1": "1",
                                 "sortOrder": 'PRICE',
                                 "locale": 'ru_RU',
                                 "currency": 'RUB'}
        elif data['command'] == 'highprice':
            querystring_hotel = {"destinationId": data['id_location'],
                                 "pageNumber": '1',
                                 "pageSize": data['hotel_count'],
                                 "checkIn": data['arrival_date'],
                                 "checkOut": data['departure_date'],
                                 "adults1": "1",
                                 "sortOrder": 'PRICE_HIGHEST_FIRST',
                                 "locale": 'ru_RU',
                                 "currency": 'RUB'}
        elif data['command'] == 'bestdeal':
            querystring_hotel = {"destinationId": data['id_location'],
                                 "pageNumber": '1',
                                 "pageSize": '25',
                                 "checkIn": data['arrival_date'],
                                 "checkOut": data['departure_date'],
                                 "adults1": "1",
                                 "locale": 'ru_RU',
                                 "currency": 'RUB',
                                 "sortOrder": 'DISTANCE_FROM_LANDMARK',
                                 "priceMin": data['min_price'],
                                 "priceMax": data['max_price']
                                 }
        else:
            querystring_hotel = None
        days = data['days']
        photo_count = data['photo_count']
        hotels = request_hotels(url_hotels, headers, querystring_hotel, days)
    if not bool(hotels):
        bot.send_message(message.from_user.id, text_not_found)
    elif hotels is None:
        bot.send_message(message.from_user.id, text_server_problem)
    else:
        name_hotels = list()
        data['location'] = hotels[0]['location']
        if data['command'] == 'bestdeal':
            count = 0
            for i_hotel in hotels:
                count += 1
                if float(i_hotel['distance'][:-3].replace(',', '.')) <= int(data['distance']):
                    text = f"üõé–û—Ç–µ–ª—å: {i_hotel['name']}\n" \
                           f"üèÜ–†–µ–π—Ç–∏–Ω–≥: {i_hotel['rating']}\n" \
                           f"üìç–ê–¥—Ä–µ—Å: {i_hotel['address']}\n" \
                           f"üöï–î–æ —Ü–µ–Ω—Ç—Ä–∞: {i_hotel['distance']}\n" \
                           f"üí¥–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {i_hotel['price']}\n" \
                           f"üí∞–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {i_hotel['total_price']}\n" \
                           f"üåê–°–∞–π—Ç: {i_hotel['web_site']}"
                    name_hotels.append(i_hotel['name'])
                else:
                    text = None
                if photo_count:
                    send_message_with_photo(message, text, photo_count, i_hotel)
                elif not photo_count and bool(name_hotels) is True:
                    bot.send_message(message.from_user.id, text, disable_web_page_preview=True)
                if count == int(data['hotel_count']):
                    break
            if not bool(name_hotels):
                bot.send_message(message.from_user.id, text_not_found)
        else:
            for i_hotel in hotels:
                text = f"üõé–û—Ç–µ–ª—å: {i_hotel['name']}\n" \
                       f"üèÜ–†–µ–π—Ç–∏–Ω–≥: {i_hotel['rating']}\n" \
                       f"üìç–ê–¥—Ä–µ—Å: {i_hotel['address']}\n" \
                       f"üöï–î–æ —Ü–µ–Ω—Ç—Ä–∞: {i_hotel['distance']}\n" \
                       f"üí¥–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {i_hotel['price']}\n" \
                       f"üí∞–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {i_hotel['total_price']}\n" \
                       f"üåê–°–∞–π—Ç: {i_hotel['web_site']}"
                name_hotels.append(i_hotel['name'])
                if photo_count:
                    send_message_with_photo(message, text, photo_count, i_hotel)
                else:
                    bot.send_message(message.from_user.id, text, disable_web_page_preview=True)

        if bool(name_hotels):
            add_data(data['command'], data['date_time'], data['location'], message.from_user.id, name_hotels)
    bot.delete_state(message.from_user.id, message.chat.id)


def send_message_with_photo(message: Message, text: str, photo_count: int, hotel: dict) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param text: —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–µ–ª—è
    :param photo_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è
    :param hotel: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ—Ç–µ–ª—é
    """
    photos = request_hotel_photo(url_hotel_photo, headers, photo_count, querystring={'id': hotel['id']})
    if not bool(photos):
        bot.send_message(message.from_user.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n' + text)
    else:
        if photo_count == 1:
            try:
                bot.send_photo(message.from_user.id, photo=photos[0], caption=text)
            except ApiTelegramException:
                bot.send_message(message.from_user.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n' + text)
        else:
            media = list()
            for i_photo in photos:
                if photos.index(i_photo) == 0:
                    try:
                        media.append(InputMediaPhoto(media=i_photo, caption=text))
                    except ApiTelegramException:
                        bot.send_message(message.from_user.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n' + text)
                else:
                    media.append(InputMediaPhoto(i_photo))
            try:
                bot.send_media_group(message.from_user.id, media=media)
            except ApiTelegramException:
                bot.send_message(message.from_user.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n' + text)
